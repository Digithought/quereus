-- set_operations.sqllogic - Testing UNION, INTERSECT, EXCEPT operations

PRAGMA default_vtab_module='memory';

-- Setup test tables
CREATE TABLE set_a (id INTEGER PRIMARY KEY, value TEXT);
CREATE TABLE set_b (id INTEGER PRIMARY KEY, value TEXT);

INSERT INTO set_a VALUES (1, 'apple'), (2, 'banana'), (3, 'cherry');
INSERT INTO set_b VALUES (2, 'banana'), (3, 'cherry'), (4, 'date');

-- UNION (combines and deduplicates)
SELECT value FROM set_a
UNION
SELECT value FROM set_b
ORDER BY value;
→ [{"value":"apple"},{"value":"banana"},{"value":"cherry"},{"value":"date"}]

-- UNION ALL (combines without deduplication)
SELECT value FROM set_a
UNION ALL
SELECT value FROM set_b
ORDER BY value;
→ [{"value":"apple"},{"value":"banana"},{"value":"banana"},{"value":"cherry"},{"value":"cherry"},{"value":"date"}]

-- INTERSECT (common values)
SELECT value FROM set_a
INTERSECT
SELECT value FROM set_b
ORDER BY value;
→ [{"value":"banana"},{"value":"cherry"}]

-- EXCEPT/MINUS (values in first set but not second)
SELECT value FROM set_a
EXCEPT
SELECT value FROM set_b
ORDER BY value;
→ [{"value":"apple"}]

-- Complex set operations with WHERE clauses
SELECT value FROM set_a WHERE id > 1
UNION
SELECT value FROM set_b WHERE id < 4
ORDER BY value;
→ [{"value":"banana"},{"value":"cherry"}]

-- Set operations with literals
SELECT 'literal1' as value
UNION
SELECT value FROM set_a WHERE id = 1
ORDER BY value;
→ [{"value":"apple"},{"value":"literal1"}]

-- Nested set operations
SELECT value FROM set_a
UNION
(SELECT value FROM set_b EXCEPT SELECT 'banana')
ORDER BY value;
→ [{"value":"apple"},{"value":"banana"},{"value":"cherry"},{"value":"date"}]

-- Set operations with different column types (should handle type coercion)
CREATE TABLE set_numbers (id INTEGER PRIMARY KEY, value INTEGER);
INSERT INTO set_numbers VALUES (1, 123), (2, 456);
SELECT CAST(value AS TEXT) as value FROM set_numbers
UNION
SELECT value FROM set_a WHERE id = 1;
→ [{"value":"123"},{"value":"456"},{"value":"apple"}]
DROP TABLE set_numbers;

DROP TABLE set_a;
DROP TABLE set_b;

-- Test set operation mathematical properties
-- Test UNION commutativity: A UNION B = B UNION A
SELECT value FROM (VALUES (1), (2), (3)) AS t1(value)
UNION
SELECT value FROM (VALUES (2), (4), (5)) AS t2(value)
ORDER BY value;
→ [{"value":1},{"value":2},{"value":3},{"value":4},{"value":5}]

SELECT value FROM (VALUES (2), (4), (5)) AS t1(value)
UNION
SELECT value FROM (VALUES (1), (2), (3)) AS t2(value)
ORDER BY value;
→ [{"value":1},{"value":2},{"value":3},{"value":4},{"value":5}]

-- Test UNION idempotency: A UNION A = A
SELECT value FROM (VALUES (1), (2), (3)) AS t1(value)
UNION
SELECT value FROM (VALUES (1), (2), (3)) AS t2(value)
ORDER BY value;
→ [{"value":1},{"value":2},{"value":3}]

SELECT DISTINCT value FROM (VALUES (1), (2), (3)) AS t1(value)
ORDER BY value;
→ [{"value":1},{"value":2},{"value":3}]

-- Test INTERSECT commutativity
SELECT value FROM (VALUES (1), (2), (3), (4)) AS t1(value)
INTERSECT
SELECT value FROM (VALUES (2), (3), (4), (5)) AS t2(value)
ORDER BY value;
→ [{"value":2},{"value":3},{"value":4}]

SELECT value FROM (VALUES (2), (3), (4), (5)) AS t1(value)
INTERSECT
SELECT value FROM (VALUES (1), (2), (3), (4)) AS t2(value)
ORDER BY value;
→ [{"value":2},{"value":3},{"value":4}]
