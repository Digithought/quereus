-- 43-default-nullability.sqllogic - Testing default NOT NULL column behavior (Third Manifesto alignment)

PRAGMA default_vtab_module='memory';

-- Test default NOT NULL behavior
CREATE TABLE test_default_notnull (
    id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER
);

-- Valid insert - should succeed
INSERT INTO test_default_notnull VALUES (1, 'Alice', 30);
SELECT * FROM test_default_notnull WHERE id = 1;
→ [{"id":1,"name":"Alice","age":30}]

-- Insert with NULL name - should fail (NOT NULL by default)
INSERT INTO test_default_notnull VALUES (2, NULL, 25);
-- error: NOT NULL constraint failed: test_default_notnull.name

-- Insert with NULL age - should fail (NOT NULL by default)
INSERT INTO test_default_notnull VALUES (3, 'Bob', NULL);
-- error: NOT NULL constraint failed: test_default_notnull.age

-- Verify only valid row was inserted
SELECT COUNT(*) FROM test_default_notnull;
→ [{"count(*)":1}]

DROP TABLE test_default_notnull;

-- Test explicit NULL override
CREATE TABLE test_explicit_null (
    id INTEGER PRIMARY KEY,
    required_field TEXT,
    optional_field TEXT NULL
);

-- Insert with NULL in required field - should fail
INSERT INTO test_explicit_null VALUES (1, NULL, 'optional');
-- error: NOT NULL constraint failed: test_explicit_null.required_field

-- Insert with NULL in optional field - should succeed
INSERT INTO test_explicit_null VALUES (2, 'required', NULL);
SELECT * FROM test_explicit_null WHERE id = 2;
→ [{"id":2,"required_field":"required","optional_field":null}]

-- Insert with both fields populated - should succeed
INSERT INTO test_explicit_null VALUES (3, 'test', 'value');
SELECT * FROM test_explicit_null WHERE id = 3;
→ [{"id":3,"required_field":"test","optional_field":"value"}]

DROP TABLE test_explicit_null;

-- Test pragma to revert to SQL standard nullable behavior
PRAGMA default_column_nullability='nullable';

PRAGMA default_column_nullability;
→ [{"name": "default_column_nullability", "value": "nullable"}]

CREATE TABLE test_nullable_default (
    id INTEGER PRIMARY KEY,
    name TEXT,
    value INTEGER
);

-- Insert with NULL values - should succeed with nullable pragma
INSERT INTO test_nullable_default VALUES (1, NULL, NULL);
SELECT * FROM test_nullable_default WHERE id = 1;
→ [{"id":1,"name":null,"value":null}]

-- Insert with values - should also succeed
INSERT INTO test_nullable_default VALUES (2, 'test', 42);
SELECT * FROM test_nullable_default WHERE id = 2;
→ [{"id":2,"name":"test","value":42}]

DROP TABLE test_nullable_default;

-- Restore default NOT NULL behavior
PRAGMA default_column_nullability='not_null';

PRAGMA default_column_nullability;
→ [{"name": "default_column_nullability", "value": "not_null"}]

-- Test that explicit NOT NULL still works
CREATE TABLE test_explicit_notnull (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER
);

-- Insert with NULL name - should fail
INSERT INTO test_explicit_notnull VALUES (1, NULL, 30);
-- error: NOT NULL constraint failed: test_explicit_notnull.name

-- Insert with NULL age - should fail (default NOT NULL)
INSERT INTO test_explicit_notnull VALUES (2, 'Alice', NULL);
-- error: NOT NULL constraint failed: test_explicit_notnull.age

-- Valid insert - should succeed
INSERT INTO test_explicit_notnull VALUES (3, 'Bob', 25);
SELECT * FROM test_explicit_notnull WHERE id = 3;
→ [{"id":3,"name":"Bob","age":25}]

DROP TABLE test_explicit_notnull;

-- Test mixed NULL and NOT NULL columns
CREATE TABLE test_mixed (
    id INTEGER PRIMARY KEY,
    required_name TEXT NOT NULL,
    optional_desc TEXT NULL,
    required_count INTEGER,
    optional_notes TEXT NULL
);

-- Insert with all required fields, NULL optionals - should succeed
INSERT INTO test_mixed VALUES (1, 'Item1', NULL, 5, NULL);
SELECT * FROM test_mixed WHERE id = 1;
→ [{"id":1,"required_name":"Item1","optional_desc":null,"required_count":5,"optional_notes":null}]

-- Insert with NULL required field - should fail
INSERT INTO test_mixed VALUES (2, NULL, 'desc', 10, 'notes');
-- error: NOT NULL constraint failed: test_mixed.required_name

-- Insert with NULL required count - should fail
INSERT INTO test_mixed VALUES (3, 'Item3', 'desc', NULL, 'notes');
-- error: NOT NULL constraint failed: test_mixed.required_count

-- Valid insert with all fields - should succeed
INSERT INTO test_mixed VALUES (4, 'Item4', 'description', 20, 'some notes');
SELECT * FROM test_mixed WHERE id = 4;
→ [{"id":4,"required_name":"Item4","optional_desc":"description","required_count":20,"optional_notes":"some notes"}]

DROP TABLE test_mixed;
