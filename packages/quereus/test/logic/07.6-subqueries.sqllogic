-- subqueries.sqllogic - Testing various subquery forms

PRAGMA default_vtab_module='memory';

-- Setup tables
CREATE TABLE outer_t (id INTEGER PRIMARY KEY, grp TEXT);
CREATE TABLE inner_t (id INTEGER PRIMARY KEY, val INTEGER, outer_id INTEGER);

INSERT INTO outer_t VALUES (1, 'A'), (2, 'B'), (3, 'A');
INSERT INTO inner_t VALUES (10, 100, 1), (20, 200, 2), (30, 300, 1), (40, 400, 3), (50, 500, null);

-- Scalar Subquery (Uncorrelated)
SELECT (SELECT max(val) FROM inner_t);
→ [{"(select max(val) from inner_t)":500}]
SELECT id, (SELECT count(*) FROM inner_t) as inner_count FROM outer_t ORDER BY id;
→ [{"id":1,"inner_count":5},{"id":2,"inner_count":5},{"id":3,"inner_count":5}]

-- Scalar Subquery (Correlated)
SELECT id, (SELECT sum(val) FROM inner_t WHERE inner_t.outer_id = outer_t.id) as grp_sum FROM outer_t ORDER BY id;
→ [{"id":1,"grp_sum":400},{"id":2,"grp_sum":200},{"id":3,"grp_sum":400}]

-- EXISTS Subquery (Uncorrelated)
SELECT id FROM outer_t WHERE EXISTS (SELECT 1 FROM inner_t WHERE val > 1000);
→ []
SELECT id FROM outer_t WHERE EXISTS (SELECT 1 FROM inner_t WHERE val < 200);
→ [{"id":1},{"id":2},{"id":3}]

-- EXISTS Subquery (Correlated)
SELECT id FROM outer_t WHERE EXISTS (SELECT 1 FROM inner_t WHERE inner_t.outer_id = outer_t.id AND val > 250) ORDER BY id;
→ [{"id":1},{"id":3}]
SELECT id FROM outer_t WHERE NOT EXISTS (SELECT 1 FROM inner_t WHERE inner_t.outer_id = outer_t.id);
→ []

-- IN Subquery (Uncorrelated)
SELECT id FROM outer_t WHERE id IN (SELECT outer_id FROM inner_t WHERE val > 300) ORDER BY id;
→ [{"id":3}]
SELECT id FROM outer_t WHERE id NOT IN (SELECT outer_id FROM inner_t WHERE val < 300) ORDER BY id;
→ [{"id":3}]

-- IN Subquery (Correlated - less common, but syntactically valid)
SELECT id FROM outer_t WHERE outer_t.grp IN (SELECT o2.grp FROM outer_t o2 WHERE o2.id = outer_t.id) ORDER BY id;
→ [{"id":1},{"id":2},{"id":3}]

-- Comparison Subquery (Uncorrelated)
SELECT id FROM outer_t WHERE id = (SELECT min(outer_id) FROM inner_t);
→ [{"id":1}]
SELECT id FROM outer_t WHERE id > (SELECT avg(outer_id) FROM inner_t WHERE outer_id IS NOT NULL) ORDER BY id;
→ [{"id":2},{"id":3}]

-- Comparison Subquery (Correlated)
SELECT id FROM outer_t WHERE outer_t.id = (SELECT i.outer_id FROM inner_t i WHERE i.val = 400 AND i.outer_id = outer_t.id);
→ [{"id":3}]

-- Subquery in SELECT list returning multiple rows (Error expected)
SELECT id, (SELECT val FROM inner_t WHERE inner_t.outer_id = outer_t.id) FROM outer_t;
-- error: subquery must return only one column

DROP TABLE outer_t;
DROP TABLE inner_t;
