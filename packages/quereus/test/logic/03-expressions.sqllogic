-- expressions.sqllogic - Testing various expression types and operators

PRAGMA default_vtab_module='memory';

CREATE TABLE expr_t (i INTEGER, n NUMERIC, t TEXT, b BLOB);
INSERT INTO expr_t VALUES (1, 10.5, 'hello', x'01ff'), (2, -5, 'world', x'02'), (3, 0, null, null);
-- No expected output for setup

-- Arithmetic
SELECT i + 1, n * 2, i / 2.0, i % 2 FROM expr_t WHERE i = 1;
→ [{"i + 1":2,"n * 2":21,"i / 2.0":0.5,"i % 2":1}]
SELECT i + 1, n * 2, i / 2.0, i % 2 FROM expr_t WHERE i = 2;
→ [{"i + 1":3,"n * 2":-10,"i / 2.0":1,"i % 2":0}]

-- String Concatenation
SELECT t || ' ' || t FROM expr_t WHERE i = 1;
→ [{"t || ' ' || t":"hello hello"}]

-- Comparisons
SELECT i > 1, n <= 10.5, t = 'hello', b != x'01ff' FROM expr_t WHERE i = 1;
→ [{"i > 1":0,"n <= 10.5":1,"t = 'hello'":1,"b != x'01ff'":0}]
SELECT i > 1, n <= 10.5, t == 'world' FROM expr_t WHERE i = 2;
→ [{"i > 1":1,"n <= 10.5":1,"t == 'world'":1}]

-- Logical Operators
SELECT i > 1 AND n < 0 FROM expr_t WHERE i = 2;
→ [{"i > 1 and n < 0":1}]
SELECT i = 1 OR t = 'world' FROM expr_t ORDER BY i;
→ [{"i = 1 or t = 'world'":1},{"i = 1 or t = 'world'":1},{"i = 1 or t = 'world'":null}]
SELECT NOT (n = 0) FROM expr_t WHERE i = 3;
→ [{"not (n = 0)":0}]

-- XOR Operator (3VL)
SELECT 1 XOR 1, 1 XOR 0, 0 XOR 1, 0 XOR 0;
→ [{"1 xor 1":0,"1 xor 0":1,"0 xor 1":1,"0 xor 0":0}]
SELECT NULL XOR 1, NULL XOR 0, 1 XOR NULL, 0 XOR NULL, NULL XOR NULL;
→ [{"null xor 1":null,"null xor 0":null,"1 xor null":null,"0 xor null":null,"null xor null":null}]
SELECT (i > 1) XOR (n < 0) FROM expr_t WHERE i = 2; -- TRUE XOR TRUE -> FALSE
→ [{"i > 1 xor n < 0":0}]
SELECT (i > 1) XOR (t = 'hello') FROM expr_t WHERE i = 1; -- FALSE XOR TRUE -> TRUE
→ [{"i > 1 xor t = 'hello'":1}]
SELECT (i > 1) XOR n IS NULL FROM expr_t WHERE i = 1; -- FALSE XOR FALSE -> FALSE
→ [{"i > 1 xor n is null":0}]
SELECT (i > 1) XOR t IS NULL FROM expr_t WHERE i = 3; -- FALSE XOR NULL -> NULL
→ [{"i > 1 xor t is null":0}]

-- NULL Handling
SELECT t is null, t IS NOT NULL, n + NULL FROM expr_t WHERE i = 3;
→ [{"t is null":1,"t is not null":0,"n + null":null}]
SELECT coalesce(t, 'default') FROM expr_t ORDER BY i;
→ [{"coalesce(t, 'default')":"hello"},{"coalesce(t, 'default')":"world"},{"coalesce(t, 'default')":"default"}]
SELECT nullif(i, 2) FROM expr_t ORDER BY i;
→ [{"nullif(i, 2)":1},{"nullif(i, 2)":null},{"nullif(i, 2)":3}]

-- CASE expressions
SELECT CASE i WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'other' END FROM expr_t ORDER BY i;
→ [{"case i when 1 then 'one' when 2 then 'two' else 'other' end":"one"},{"case i when 1 then 'one' when 2 then 'two' else 'other' end":"two"},{"case i when 1 then 'one' when 2 then 'two' else 'other' end":"other"}]
SELECT CASE WHEN n > 0 THEN 'pos' WHEN n < 0 THEN 'neg' ELSE 'zero' END FROM expr_t ORDER BY i;
→ [{"case when n > 0 then 'pos' when n < 0 then 'neg' else 'zero' end":"pos"},{"case when n > 0 then 'pos' when n < 0 then 'neg' else 'zero' end":"neg"},{"case when n > 0 then 'pos' when n < 0 then 'neg' else 'zero' end":"zero"}]

-- CAST expressions
SELECT cast(i as TEXT), cast(n as INTEGER), cast(t as REAL) FROM expr_t WHERE i = 1;
→ [{"cast(i as text)":"1","cast(n as integer)":10,"cast(t as real)":0}]
SELECT cast('123' as INTEGER), cast('12.3' as REAL), cast(123 as TEXT);
→ [{"cast('123' as integer)":123,"cast('12.3' as real)":12.3,"cast(123 as text)":"123"}]

-- COLLATE (basic syntax check, assumes default collation)
SELECT t FROM expr_t WHERE t = 'HELLO' COLLATE NOCASE ORDER BY i;
→ [{"t":"hello"}]

DROP TABLE expr_t;

SELECT typeof(1 + 2), typeof(1.5 + 2), typeof('a' || 'b');
→ [{"typeof(1 + 2)":"integer","typeof(1.5 + 2)":"real","typeof('a' || 'b')":"text"}]


