-- 42-returning.sqllogic - Testing RETURNING clauses

PRAGMA default_vtab_module='memory';

-- === Basic RETURNING tests ===

DROP TABLE IF EXISTS test_returning;
CREATE TABLE test_returning (
    id INTEGER PRIMARY KEY,
    name TEXT,
    value INTEGER DEFAULT 100
);

-- INSERT with RETURNING
INSERT INTO test_returning (id, name) VALUES (101, 'first') RETURNING id, name, value;
→ [{"id":101,"name":"first","value":100}]

INSERT INTO test_returning (id, name, value) VALUES (102, 'second', 200) RETURNING *;
-- error: RETURNING * not yet supported

INSERT INTO test_returning (id, name, value) VALUES (103, 'third', 300) RETURNING id, name;
→ [{"id":103,"name":"third"}]

-- Verify data was actually inserted
SELECT * FROM test_returning ORDER BY id;
→ [{"id":101,"name":"first","value":100},{"id":103,"name":"third","value":300}]

-- UPDATE with RETURNING
UPDATE test_returning SET value = value + 50 WHERE id = 101 RETURNING id, name, value;
→ [{"id":101,"name":"first","value":150}]

-- UPDATE multiple rows with RETURNING
UPDATE test_returning SET name = name || '_updated' RETURNING id, name;
→ [{"id":101,"name":"first_updated"},{"id":103,"name":"third_updated"}]

-- Verify updates were applied
SELECT * FROM test_returning ORDER BY id;
→ [{"id":101,"name":"first_updated","value":150},{"id":103,"name":"third_updated","value":300}]

-- DELETE with RETURNING
DELETE FROM test_returning WHERE id = 103 RETURNING id, name, value;
→ [{"id":103,"name":"third_updated","value":300}]

-- Verify deletion
SELECT * FROM test_returning;
→ [{"id":101,"name":"first_updated","value":150}]

-- === RETURNING with expressions ===

INSERT INTO test_returning (id, name, value) VALUES (104, 'fourth', 400) RETURNING id, upper(name), value * 2;
→ [{"id":104,"upper(name)":"FOURTH","value * 2":800}]

INSERT INTO test_returning (id, name, value) VALUES (105, 'fifth', 500) RETURNING id, name AS item_name, value + 100 AS adjusted_value;
→ [{"id":105,"item_name":"fifth","adjusted_value":600}]

-- === RETURNING with constraints (should only return if operation succeeds) ===

DROP TABLE test_returning;

CREATE TABLE test_constrained (
    id INTEGER PRIMARY KEY,
    positive_value INTEGER CHECK(positive_value > 0),
    name TEXT NOT NULL
);

-- Successful INSERT with RETURNING
INSERT INTO test_constrained (id, positive_value, name) VALUES (201, 10, 'valid') RETURNING id, positive_value;
→ [{"id":201,"positive_value":10}]

-- Failed INSERT due to constraint - should not return anything
INSERT INTO test_constrained (id, positive_value, name) VALUES (202, -5, 'invalid') RETURNING id, positive_value;
-- error: CHECK constraint failed: check_0

-- Failed INSERT due to NOT NULL - should not return anything
INSERT INTO test_constrained (id, positive_value, name) VALUES (203, 15, NULL) RETURNING id, name;
-- error: NOT NULL constraint failed: test_constrained.name

-- Verify only the successful insert was applied
SELECT * FROM test_constrained;
→ [{"id":201,"positive_value":10,"name":"valid"}]

-- Successful UPDATE with RETURNING
UPDATE test_constrained SET positive_value = 20 WHERE id = 201 RETURNING id, positive_value;
→ [{"id":201,"positive_value":20}]

-- Failed UPDATE due to constraint - should not return anything
UPDATE test_constrained SET positive_value = -1 WHERE id = 201 RETURNING id, positive_value;
-- error: CHECK constraint failed: check_0

-- Verify failed update didn't change anything
SELECT positive_value FROM test_constrained WHERE id = 201;
→ [{"positive_value":20}]

-- === RETURNING with no matching rows ===

-- UPDATE with WHERE that matches nothing
UPDATE test_constrained SET positive_value = 30 WHERE id = 999 RETURNING id, positive_value;
→ []

-- DELETE with WHERE that matches nothing
DELETE FROM test_constrained WHERE name = 'nonexistent' RETURNING id, name;
→ []

-- === Multiple row RETURNING ===

INSERT INTO test_constrained (id, positive_value, name) VALUES
    (210, 100, 'row1'),
    (211, 110, 'row2'),
    (212, 120, 'row3')
RETURNING id, name;
→ [{"id":210,"name":"row1"},{"id":211,"name":"row2"},{"id":212,"name":"row3"}]

-- Update multiple rows
UPDATE test_constrained SET positive_value = positive_value + 5 WHERE id >= 210 RETURNING id, positive_value;
→ [{"id":210,"positive_value":105},{"id":211,"positive_value":115},{"id":212,"positive_value":125}]

-- Delete multiple rows
DELETE FROM test_constrained WHERE id >= 210 RETURNING name;
→ [{"name":"row1"},{"name":"row2"},{"name":"row3"}]

DROP TABLE test_constrained;

DROP TABLE t_check_alias;
CREATE TABLE t_check_alias (
    id INTEGER PRIMARY KEY,
    version INTEGER DEFAULT 1,
    payload TEXT,
    CONSTRAINT version_increase CHECK ON UPDATE (NEW.version > OLD.version)
);
INSERT INTO t_check_alias (id, payload) VALUES (310, 'initial data');
SELECT version FROM t_check_alias WHERE id = 310;
  -> Executing setup statement: DROP TABLE t_check_on
  -> Executing setup statement: CREATE TABLE t_check_alias (
    id INTEGER PRIMARY KEY,
    version INTEGER DEFAULT 1,
    payload TEXT,
    CONSTRAINT version_increase CHECK ON UPDATE (NEW.version > OLD.version)
)
  -> Executing setup statement: INSERT INTO t_check_alias (id, payload) VALUES (310, 'initial data')
  -> Executing final statement (with tracing): SELECT version FROM t_check_alias WHERE id = 310
   -> Results match!
Executing block (expect results):
UPDATE t_check_alias SET version = 2, payload = 'updated data' WHERE id = 310;
SELECT version, payload FROM t_check_alias WHERE id = 310;
