-- indexes.sqllogic - Testing index creation and usage

PRAGMA default_vtab_module='memory';

-- Setup base table for index testing
CREATE TABLE idx_test (
    id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER,
    city TEXT,
    score REAL,
    active INTEGER
);

INSERT INTO idx_test VALUES
    (1, 'Alice', 30, 'New York', 95.5, 1),
    (2, 'Bob', 25, 'London', 87.2, 1),
    (3, 'Charlie', 35, 'New York', 92.1, 0),
    (4, 'David', 30, 'Paris', 89.8, 1),
    (5, 'Eve', 28, 'London', 96.3, 1);

-- Basic CREATE INDEX
CREATE INDEX idx_name ON idx_test (name);

-- Verify table still works after index creation
SELECT name FROM idx_test WHERE name = 'Alice';
→ [{"name":"Alice"}]

-- CREATE INDEX with IF NOT EXISTS
CREATE INDEX IF NOT EXISTS idx_age ON idx_test (age);

-- Try to create same index again (should succeed with IF NOT EXISTS)
CREATE INDEX IF NOT EXISTS idx_age ON idx_test (age);

-- Multi-column index
CREATE INDEX idx_city_age ON idx_test (city, age);

-- Index with DESC ordering
CREATE INDEX idx_score_desc ON idx_test (score DESC);

-- Index on different data types
CREATE INDEX idx_active ON idx_test (active);

-- Verify queries still work with indexes
SELECT id, name FROM idx_test WHERE age = 30 ORDER BY name;
→ [{"id":1,"name":"Alice"},{"id":4,"name":"David"}]

SELECT name FROM idx_test WHERE city = 'London' ORDER BY age;
→ [{"name":"Bob"},{"name":"Eve"}]

SELECT name, score FROM idx_test WHERE score > 90 ORDER BY score DESC;
→ [{"name":"Eve","score":96.3},{"name":"Alice","score":95.5},{"name":"Charlie","score":92.1}]

-- Test UNIQUE index
CREATE TABLE unique_test (id INTEGER PRIMARY KEY, email TEXT);
INSERT INTO unique_test VALUES (1, 'alice@example.com'), (2, 'bob@example.com');

CREATE UNIQUE INDEX idx_email_unique ON unique_test (email);

-- Query with unique index
SELECT id FROM unique_test WHERE email = 'alice@example.com';
→ [{"id":1}]

-- Test index on NULL values
CREATE TABLE null_test (id INTEGER PRIMARY KEY, optional_field TEXT NULL);
INSERT INTO null_test VALUES (1, 'value1'), (2, NULL), (3, 'value3'), (4, NULL);

CREATE INDEX idx_optional ON null_test (optional_field);

-- Query with NULL values
SELECT id FROM null_test WHERE optional_field IS NULL ORDER BY id;
→ [{"id":2},{"id":4}]

SELECT id FROM null_test WHERE optional_field = 'value1';
→ [{"id":1}]

-- Test complex WHERE clauses with indexed columns
SELECT name, age FROM idx_test WHERE city = 'New York' AND age > 30 ORDER BY name;
→ [{"name":"Charlie","age":35}]

-- Test JOIN with indexed columns
CREATE TABLE departments (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
INSERT INTO departments VALUES (1, 'Engineering', 'New York'), (2, 'Sales', 'London'), (3, 'Marketing', 'Paris');

CREATE INDEX idx_dept_city ON departments (city);

SELECT i.name, d.name as dept FROM idx_test i
JOIN departments d ON i.city = d.city
WHERE i.active = 1
ORDER BY i.name;
→ [{"name":"Alice","dept":"Engineering"},{"name":"Bob","dept":"Sales"},{"name":"David","dept":"Marketing"},{"name":"Eve","dept":"Sales"}]

-- Test ORDER BY with indexed columns (should be optimized)
SELECT name FROM idx_test ORDER BY name;
→ [{"name":"Alice"},{"name":"Bob"},{"name":"Charlie"},{"name":"David"},{"name":"Eve"}]

SELECT name FROM idx_test ORDER BY age, name;
→ [{"name":"Bob"},{"name":"Eve"},{"name":"Alice"},{"name":"David"},{"name":"Charlie"}]

-- Test range queries on indexed columns
SELECT name FROM idx_test WHERE age BETWEEN 25 AND 30 ORDER BY age, name;
→ [{"name":"Bob"},{"name":"Eve"},{"name":"Alice"},{"name":"David"}]

-- Error cases

-- Try to create index on non-existent table
CREATE INDEX idx_bad_table ON non_existent_table (col);
-- error: no such table

-- Try to create index on non-existent column
CREATE INDEX idx_bad_col ON idx_test (non_existent_column);
-- error: Column 'non_existent_column' not found in table 'idx_test'

-- Try to create duplicate index without IF NOT EXISTS
CREATE INDEX idx_name ON idx_test (name);
-- error: Index idx_name already exists

-- Clean up
DROP TABLE departments;
DROP TABLE null_test;
DROP TABLE unique_test;
DROP TABLE idx_test;
