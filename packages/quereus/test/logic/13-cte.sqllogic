-- cte.sqllogic - Testing Common Table Expressions (WITH clause)

PRAGMA default_vtab_module='memory';

-- Simple non-recursive CTE
CREATE TABLE base_t (id INTEGER PRIMARY KEY, name TEXT);
INSERT INTO base_t VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie');

WITH name_cte AS (
  SELECT name FROM base_t WHERE id > 1
)
SELECT * FROM name_cte ORDER BY name;
→ [{"name":"Bob"},{"name":"Charlie"}]

-- Multiple CTEs
WITH
  cte1 AS (SELECT id, name FROM base_t WHERE id = 1),
  cte2 AS (SELECT id, name FROM base_t WHERE id = 2)
SELECT * FROM cte1 UNION ALL SELECT * FROM cte2 ORDER BY id;
→ [{"id":1,"name":"Alice"},{"id":2,"name":"Bob"}]

-- CTE used in INSERT
CREATE TABLE target_t (id INTEGER, name_upper TEXT);
WITH source_cte AS (
  SELECT id, upper(name) as upper_name FROM base_t WHERE id = 3
)
INSERT INTO target_t (id, name_upper) SELECT id, upper_name FROM source_cte;
SELECT * FROM target_t;
→ [{"id":3,"name_upper":"CHARLIE"}]
DROP TABLE target_t;

-- Basic Recursive CTE (Counting)
WITH RECURSIVE counter(n) AS (
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM counter WHERE n < 5
)
SELECT n FROM counter ORDER BY n;
→ [{"n":1},{"n":2},{"n":3},{"n":4},{"n":5}]

-- Recursive CTE with base table (e.g., simple hierarchy/path)
CREATE TABLE hierarchy (id INTEGER PRIMARY KEY, parent_id INTEGER, name TEXT);
INSERT INTO hierarchy VALUES (1, null, 'Root'), (2, 1, 'Child A'), (3, 1, 'Child B'), (4, 2, 'Grandchild A1');

WITH RECURSIVE path_cte(id, name, level) AS (
  SELECT id, name, 0 FROM hierarchy WHERE parent_id IS NULL
  UNION ALL
  SELECT h.id, p.name || ' -> ' || h.name, p.level + 1
  FROM hierarchy h JOIN path_cte p ON h.parent_id = p.id
)
SELECT name, level FROM path_cte ORDER BY level, name;
→ [{"name":"Root","level":0},{"name":"Root -> Child A","level":1},{"name":"Root -> Child B","level":1},{"name":"Root -> Child A -> Grandchild A1","level":2}]

DROP TABLE base_t;
DROP TABLE hierarchy;
