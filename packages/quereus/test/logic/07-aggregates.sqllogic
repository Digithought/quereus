-- aggregates.sqllogic - Testing aggregate functions and GROUP BY/HAVING

PRAGMA default_vtab_module='memory';

CREATE TABLE agg_t (id INTEGER PRIMARY KEY, grp TEXT, val INTEGER);
INSERT INTO agg_t VALUES (1, 'a', 10), (2, 'b', 20), (3, 'a', 30), (4, 'b', 40), (5, 'c', 50), (6, 'a', null);

-- Basic aggregates
SELECT count(*), count(val), sum(val), avg(val), min(val), max(val) FROM agg_t;
→ [{"count(*)":6,"count(val)":5,"sum(val)":150,"avg(val)":30,"min(val)":10,"max(val)":50}]

-- GROUP BY
SELECT grp, count(*) as cnt, sum(val) as total FROM agg_t GROUP BY grp ORDER BY grp;
→ [{"grp":"a","cnt":3,"total":40},{"grp":"b","cnt":2,"total":60},{"grp":"c","cnt":1,"total":50}]

-- GROUP BY with NULL value in aggregation
SELECT grp, count(val) FROM agg_t GROUP BY grp ORDER BY grp;
→ [{"grp":"a","count(val)":2},{"grp":"b","count(val)":2},{"grp":"c","count(val)":1}]

-- HAVING clause
SELECT grp, sum(val) as total FROM agg_t GROUP BY grp HAVING total > 40 ORDER BY grp;
→ [{"grp":"b","total":60},{"grp":"c","total":50}]

-- HAVING clause referencing alias
SELECT grp, sum(val) as total FROM agg_t GROUP BY grp HAVING total > 40 ORDER BY grp;
→ [{"grp":"b","total":60},{"grp":"c","total":50}]

-- HAVING without GROUP BY
SELECT sum(val) FROM agg_t HAVING sum(val) > 100;
→ [{"sum(val)":150}]

-- Aggregate with empty input
CREATE TABLE empty_agg(x);
SELECT count(*), sum(x) FROM empty_agg;
→ [{"count(*)":0,"sum(x)":null}]
DROP TABLE empty_agg;

-- group_concat
SELECT group_concat(val) FROM agg_t WHERE grp = 'a';
→ [{"group_concat(val)":"10,30"}]
SELECT group_concat(val, '|') FROM agg_t WHERE grp = 'b' ORDER BY val;
→ [{"group_concat(val, '|')":"20|40"}]

-- DISTINCT aggregates (Example: COUNT)
SELECT count(distinct grp) FROM agg_t;
→ [{"count(distinct grp)":3}]
INSERT INTO agg_t VALUES (7, 'c', 50);
SELECT count(distinct val) FROM agg_t WHERE grp = 'c';
→ [{"count(distinct val)":1}]

DROP TABLE agg_t;

-- Test aggregate function commutativity (order independence)
CREATE TABLE agg_order_test (id INTEGER PRIMARY KEY, val REAL);
INSERT INTO agg_order_test VALUES (1, 1), (2, 2), (3, 3), (4, null), (5, 4.5), (6, -1);

SELECT SUM(val), COUNT(val), MAX(val), MIN(val) FROM agg_order_test;
→ [{"sum(val)":9.5,"count(val)":5,"max(val)":4.5,"min(val)":-1}]

-- Clear and insert in different order - results should be identical
DELETE FROM agg_order_test;
INSERT INTO agg_order_test VALUES (1, 4.5), (2, null), (3, -1), (4, 3), (5, 1), (6, 2);

SELECT SUM(val), COUNT(val), MAX(val), MIN(val) FROM agg_order_test;
→ [{"sum(val)":9.5,"count(val)":5,"max(val)":4.5,"min(val)":-1}]

-- Test with more complex mixed data
DELETE FROM agg_order_test;
INSERT INTO agg_order_test VALUES (1, 0), (2, 1), (3, null), (4, 2), (5, null), (6, 3);

SELECT SUM(val), AVG(val), COUNT(val), COUNT(*) FROM agg_order_test;
→ [{"sum(val)":6,"avg(val)":1.5,"count(val)":4,"count(*)":6}]

DROP TABLE agg_order_test;
