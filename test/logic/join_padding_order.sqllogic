-- Test suite for LEFT JOIN NULL padding and ORDER BY consumption

-- Setup Tables
CREATE TABLE t1 (id INTEGER PRIMARY KEY, val TEXT);
INSERT INTO t1 VALUES (1, 'A'), (2, 'B'), (3, 'C');

CREATE TABLE t2 (id INTEGER PRIMARY KEY, t1_id INTEGER, info TEXT);
INSERT INTO t2 VALUES (101, 1, 'InfoA1'), (102, 1, 'InfoA2'), (103, 2, 'InfoB');
-- Note: t1.id = 3 has no match in t2

-- Setup Indexed Table for ORDER BY consumption test
CREATE TABLE t_idx (id INTEGER PRIMARY KEY, name TEXT);
CREATE INDEX t_idx_name ON t_idx (name);
INSERT INTO t_idx VALUES (1, 'Xavier'), (2, 'Alice'), (3, 'Bob');

-- ==================================
-- LEFT JOIN Padding Tests
-- ==================================

-- Test: Direct Output Padding
-- Expect t2 columns to be NULL for t1.id = 3
statement ok
SELECT t1.id, t1.val, t2.id, t2.info FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id ORDER BY t1.id, t2.id;
→
[{"id":1,"val":"A","id_1":101,"info":"InfoA1"}, {"id":1,"val":"A","id_1":102,"info":"InfoA2"}, {"id":2,"val":"B","id_1":103,"info":"InfoB"}, {"id":3,"val":"C","id_1":null,"info":null}]

-- Test: Aggregate COUNT Padding
-- COUNT(t2.id) should be 0 for the group corresponding to t1.id = 3
statement ok
SELECT t1.id, COUNT(t2.id) as count_t2, COUNT(*) as count_all FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id GROUP BY t1.id ORDER BY t1.id;
→
[{"id":1,"count_t2":2,"count_all":2}, {"id":2,"count_t2":1,"count_all":1}, {"id":3,"count_t2":0,"count_all":1}]

-- Test: Aggregate SUM Padding
-- SUM(t2.id) should be NULL (ignored NULLs) for the group corresponding to t1.id = 3
statement ok
SELECT t1.id, SUM(t2.id) as sum_t2 FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id GROUP BY t1.id ORDER BY t1.id;
→
[{"id":1,"sum_t2":203}, {"id":2,"sum_t2":103}, {"id":3,"sum_t2":null}]

-- Test: Window Function ROW_NUMBER Padding
-- Partitioning by t1.id should work correctly, rows with NULL t2.id get numbered
statement ok
SELECT t1.id, t2.id as t2_id, ROW_NUMBER() OVER (PARTITION BY t1.id ORDER BY t2.id) as rn
FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id
ORDER BY t1.id, t2.id;
→
[{"id":1,"t2_id":101,"rn":1}, {"id":1,"t2_id":102,"rn":2}, {"id":2,"t2_id":103,"rn":1}, {"id":3,"t2_id":null,"rn":1}]


-- Test: Window Function SUM Padding
-- SUM(t2.id) OVER (...) should treat NULL t2.id correctly based on frame
statement ok
SELECT t1.id, t2.id as t2_id,
       SUM(t2.id) OVER (PARTITION BY t1.id ORDER BY t2.id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum
FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id
ORDER BY t1.id, t2.id;
→
[{"id":1,"t2_id":101,"running_sum":101}, {"id":1,"t2_id":102,"running_sum":203}, {"id":2,"t2_id":103,"running_sum":103}, {"id":3,"t2_id":null,"running_sum":null}]


-- ==================================
-- ORDER BY Consumption Tests
-- ==================================

-- Test: ORDER BY Consumed by Index (ASC)
-- Expect query plan to use index on t_idx.name, no Opcode.Sort
statement ok
SELECT name FROM t_idx ORDER BY name ASC;
→
[{"name":"Alice"}, {"name":"Bob"}, {"name":"Xavier"}]
-- TODO: Add VDBE inspection/assertion if possible to verify no Sort opcode

-- Test: ORDER BY Consumed by Index (DESC)
-- Expect query plan to use index on t_idx.name (backwards), no Opcode.Sort
statement ok
SELECT name FROM t_idx ORDER BY name DESC;
→
[{"name":"Xavier"}, {"name":"Bob"}, {"name":"Alice"}]
-- TODO: Add VDBE inspection/assertion if possible to verify no Sort opcode

-- Test: ORDER BY Not Consumed (Different Column)
-- Expect query plan to use PK for scan, requires Opcode.Sort
statement ok
SELECT name FROM t_idx ORDER BY id DESC;
→
[{"name":"Bob"}, {"name":"Alice"}, {"name":"Xavier"}]
-- TODO: Add VDBE inspection/assertion if possible to verify Sort opcode exists

-- Test: ORDER BY Not Consumed (Expression)
-- Expect query plan to use PK for scan, requires Opcode.Sort
statement ok
SELECT name FROM t_idx ORDER BY lower(name);
→
[{"name":"Alice"}, {"name":"Bob"}, {"name":"Xavier"}]
-- TODO: Add VDBE inspection/assertion if possible to verify Sort opcode exists

-- Test: ORDER BY on JOIN result (Likely Not Consumed)
-- Order by t1.val, join order might not preserve this. Expect Sort.
statement ok
SELECT t1.val, t2.info FROM t1 JOIN t2 ON t1.id = t2.t1_id ORDER BY t1.val DESC, t2.id ASC;
→
[{"val":"B","info":"InfoB"}, {"val":"A","info":"InfoA1"}, {"val":"A","info":"InfoA2"}]
-- TODO: Add VDBE inspection/assertion if possible to verify Sort opcode exists


