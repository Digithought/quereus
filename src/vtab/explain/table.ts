import { VirtualTable } from '../table.js';
import type { QueryPlanModule } from './module.js';
import type { Database } from '../../core/database.js';
import type { QueryPlanStep } from '../../core/explain.js';
import type { TableSchema } from '../../schema/table.js';
import { QueryPlanCursor } from './cursor.js';
import { SqliterError } from '../../common/errors.js';
import { StatusCode } from '../../common/types.js';
import { VirtualTableCursor } from '../cursor.js';

/**
 * Represents an instance of the query_plan virtual table for a specific query.
 */
export class QueryPlanTable extends VirtualTable {
    public readonly tableSchema: TableSchema; // Make public if needed by base or subclasses
    private readonly planSteps: ReadonlyArray<QueryPlanStep>;

    /** @internal Use QueryPlanModule.xConnect */
    constructor(
        db: Database,
        module: QueryPlanModule,
        tableName: string, // Alias provided by user
        schema: TableSchema, // The fixed schema defined in module
        planSteps: ReadonlyArray<QueryPlanStep> // Plan generated by _getPlanInfo
    ) {
        super(db, module as any, schema.schemaName, tableName);
        this.tableSchema = schema; // Assign the fixed schema
        this.planSteps = planSteps;
    }

    getSchema(): TableSchema {
        return this.tableSchema;
    }

    isReadOnly(): boolean {
        return true; // Query plan is read-only
    }

    // Override xBestIndex - not needed as module handles it
    // xBestIndex(...) { ... }

    async xOpen(): Promise<VirtualTableCursor<this>> {
        return new QueryPlanCursor(this, this.planSteps) as unknown as VirtualTableCursor<this>;
    }

    // Implement required abstract methods
    async xDisconnect(): Promise<void> {
        // No resources to release for this table instance
    }

    async xUpdate(/* values: SqlValue[], rowid: bigint | null */): Promise<{ rowid?: bigint; }> {
        throw new SqliterError("Cannot modify query plan table", StatusCode.READONLY);
    }

    // Other methods like xUpdate, xBegin etc. are not applicable
    // and will likely throw errors if called via base class or VDBE misuse.
}
